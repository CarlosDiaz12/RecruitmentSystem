// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecruitmentSystem.Infrastructure.Data;

namespace RecruitmentSystem.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Candidato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cedula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Departamento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PuestoAspiraId")
                        .HasColumnType("int");

                    b.Property<string>("RecomendadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SalarioAspira")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PuestoAspiraId");

                    b.ToTable("Candidatos");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.CandidatoCapacitacion", b =>
                {
                    b.Property<int>("CandidatoId")
                        .HasColumnType("int");

                    b.Property<int>("CapacitacionId")
                        .HasColumnType("int");

                    b.HasKey("CandidatoId", "CapacitacionId");

                    b.HasIndex("CapacitacionId");

                    b.ToTable("CandidatoCapacitacion");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.CandidatoCompetencia", b =>
                {
                    b.Property<int>("CandidatoId")
                        .HasColumnType("int");

                    b.Property<int>("CompetenciaId")
                        .HasColumnType("int");

                    b.HasKey("CandidatoId", "CompetenciaId");

                    b.HasIndex("CompetenciaId");

                    b.ToTable("CandidatoCompetencia");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.CandidatoExperienciaLaboral", b =>
                {
                    b.Property<int>("CandidatoId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienciaLaboralId")
                        .HasColumnType("int");

                    b.HasKey("CandidatoId", "ExperienciaLaboralId");

                    b.HasIndex("ExperienciaLaboralId");

                    b.ToTable("CandidatoExperienciaLaboral");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.CandidatoIdioma", b =>
                {
                    b.Property<int>("CandidatoId")
                        .HasColumnType("int");

                    b.Property<int>("IdiomaId")
                        .HasColumnType("int");

                    b.HasKey("CandidatoId", "IdiomaId");

                    b.HasIndex("IdiomaId");

                    b.ToTable("CandidatoIdioma");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Capacitacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaDesde")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaHasta")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institucion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NivelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NivelId")
                        .IsUnique();

                    b.ToTable("Capacitaciones");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Competencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Competencias");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cedula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Departamento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PuestoId")
                        .HasColumnType("int");

                    b.Property<double>("SalarioMensual")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PuestoId")
                        .IsUnique();

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.ExperienciaLaboral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Empresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaDesde")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaHasta")
                        .HasColumnType("datetime2");

                    b.Property<string>("PuestoOcupado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salario")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ExperiencasLaborales");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Idioma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Idiomas");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.NivelAcademico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NivelesAcademicos");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Puesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<double>("NivelMaximoSalario")
                        .HasColumnType("float");

                    b.Property<double>("NivelMinimoSalario")
                        .HasColumnType("float");

                    b.Property<string>("NivelRiesgo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Puestos");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Candidato", b =>
                {
                    b.HasOne("RecruitmentSystem.Domain.Entities.Puesto", "PuestoAspira")
                        .WithMany()
                        .HasForeignKey("PuestoAspiraId");

                    b.Navigation("PuestoAspira");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.CandidatoCapacitacion", b =>
                {
                    b.HasOne("RecruitmentSystem.Domain.Entities.Candidato", "Candidato")
                        .WithMany("PrincipalesCapacitaciones")
                        .HasForeignKey("CandidatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentSystem.Domain.Entities.Capacitacion", "Capacitacion")
                        .WithMany("Candidatos")
                        .HasForeignKey("CapacitacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidato");

                    b.Navigation("Capacitacion");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.CandidatoCompetencia", b =>
                {
                    b.HasOne("RecruitmentSystem.Domain.Entities.Candidato", "Candidato")
                        .WithMany("PrincipalesCompetencias")
                        .HasForeignKey("CandidatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentSystem.Domain.Entities.Competencia", "Competencia")
                        .WithMany("Candidatos")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidato");

                    b.Navigation("Competencia");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.CandidatoExperienciaLaboral", b =>
                {
                    b.HasOne("RecruitmentSystem.Domain.Entities.Candidato", "Candidato")
                        .WithMany("ExperienciasLaborales")
                        .HasForeignKey("CandidatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentSystem.Domain.Entities.ExperienciaLaboral", "ExperienciaLaboral")
                        .WithMany("Candidatos")
                        .HasForeignKey("ExperienciaLaboralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidato");

                    b.Navigation("ExperienciaLaboral");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.CandidatoIdioma", b =>
                {
                    b.HasOne("RecruitmentSystem.Domain.Entities.Candidato", "Candidato")
                        .WithMany("Idiomas")
                        .HasForeignKey("CandidatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecruitmentSystem.Domain.Entities.Idioma", "Idioma")
                        .WithMany("Candidatos")
                        .HasForeignKey("IdiomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidato");

                    b.Navigation("Idioma");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Capacitacion", b =>
                {
                    b.HasOne("RecruitmentSystem.Domain.Entities.NivelAcademico", "Nivel")
                        .WithOne()
                        .HasForeignKey("RecruitmentSystem.Domain.Entities.Capacitacion", "NivelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nivel");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Empleado", b =>
                {
                    b.HasOne("RecruitmentSystem.Domain.Entities.Puesto", "Puesto")
                        .WithOne()
                        .HasForeignKey("RecruitmentSystem.Domain.Entities.Empleado", "PuestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Puesto");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Candidato", b =>
                {
                    b.Navigation("ExperienciasLaborales");

                    b.Navigation("Idiomas");

                    b.Navigation("PrincipalesCapacitaciones");

                    b.Navigation("PrincipalesCompetencias");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Capacitacion", b =>
                {
                    b.Navigation("Candidatos");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Competencia", b =>
                {
                    b.Navigation("Candidatos");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.ExperienciaLaboral", b =>
                {
                    b.Navigation("Candidatos");
                });

            modelBuilder.Entity("RecruitmentSystem.Domain.Entities.Idioma", b =>
                {
                    b.Navigation("Candidatos");
                });
#pragma warning restore 612, 618
        }
    }
}
